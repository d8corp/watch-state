var watchState=function(t){"use strict";var e={activeWatcher:void 0,activeEvent:void 0};class s{constructor(t,s,a){this.watcher=t,this.ran=!1,!s&&e.activeWatcher&&e.activeWatcher.onDestroy((()=>this.destroy())),a||this.watchRun()}run(){const{ran:t}=this;return this.ran=!0,this.watcher(t)}watchRun(){const t=e.activeWatcher;e.activeWatcher=this,this.run(),e.activeWatcher=t}forceUpdate(){this.destroy(),this.watchRun()}update(){e.activeEvent?e.activeEvent.add(this):this.forceUpdate()}destroy(){const{destructors:t}=this;t&&(this.destructors=void 0,t.forEach((t=>t())))}onDestroy(t){return this.destructors?this.destructors.push(t):this.destructors=[t],this}}class a{add(t){let{watchers:e}=this;if(e){if(e.has(t))return;e.add(t)}else e=this.watchers=new Set([t]);t.onDestroy((()=>e.delete(t)))}start(){e.activeEvent||(this.activeWatcher=e.activeWatcher,e.activeWatcher=void 0,e.activeEvent=this)}end(){e.activeEvent===this&&(e.activeEvent=void 0,this.update(),e.activeWatcher=this.activeWatcher)}update(){var t;if(null===(t=this.watchers)||void 0===t?void 0:t.size){const{activeWatchers:t}=this;this.activeWatchers=this.watchers,this.watchers=t;for(const t of this.activeWatchers)this.activeWatchers.size&&t.update()}}}class i extends a{constructor(t){super(),this.state=t}get value(){return e.activeWatcher&&this.add(e.activeWatcher),this.state}set value(t){t!==this.state&&(this.state=t,this.update())}}class r extends s{constructor(t,e,s){super(t,e,!s)}destroy(){return super.destroy()}run(){this.updated=!0,this.value=super.run()}get hasWatcher(){var t,e;if(null===(e=null===(t=this._state)||void 0===t?void 0:t.watchers)||void 0===e?void 0:e.size)for(const t of this._state.watchers)if(!(t instanceof r)||t.hasWatcher)return!0}update(){this.hasWatcher?this.forceUpdate():this.updated=!1}get state(){return this._state||(this._state=new i)}get value(){return this.updated||this.forceUpdate(),this.state.value}set value(t){this.state.value=t}}return t.Cache=r,t.Event=a,t.State=i,t.Watch=s,Object.defineProperty(t,"__esModule",{value:!0}),t}({});
